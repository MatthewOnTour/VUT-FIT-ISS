# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vF7aUAwMDIR-97mjDkCxHrM5bqlC55TZ
"""

import numpy as np
import matplotlib.pyplot as plt
import soundfile as sf
import IPython
from scipy.signal import spectrogram, lfilter, freqz, tf2zpk
from scipy.io import wavfile
from scipy.io.wavfile import write

"""max min hodnota"""

# soundfile - neni potreba normalizace
s, fs = sf.read('xjusti00.wav')
t = np.arange(s.size) / fs
s.min(), s.max()

plt.figure(figsize=(6,3))
plt.plot(t, s)

# plt.gca() vraci handle na aktualni Axes objekt, 
# ktery nam umozni kontrolovat ruzne vlastnosti aktualniho grafu
# napr. popisy os
# viz https://matplotlib.org/users/pyplot_tutorial.html#working-with-multiple-figures-and-axes
plt.gca().set_xlabel('$t[s]$')
plt.gca().set_title('Zvukový signál')

plt.tight_layout()

s.size

"""vzorky """

s.size/fs

"""sekundy"""

s = s-np.mean(s)

"""ustrednenie

"""

plt.figure(figsize=(6,3))
plt.plot(t, s)

# plt.gca() vraci handle na aktualni Axes objekt, 
# ktery nam umozni kontrolovat ruzne vlastnosti aktualniho grafu
# napr. popisy os
# viz https://matplotlib.org/users/pyplot_tutorial.html#working-with-multiple-figures-and-axes
plt.gca().set_xlabel('$t[s]$')
plt.gca().set_title('Zvukový signál')

plt.tight_layout()

"""rozdelenie vzorkov tu toto"""

pole = []
length = int(round(s.size/1024))
framework = 1024
shift = 512
for i in range(length):
  pole.append(s[i*shift:i*shift+framework])
  print(pole[i])

plt.figure(figsize=(20,8))
plt.plot(np.arange(1024)/fs, pole[12])
plt.gca().set_xlabel('$t[s]$')
plt.gca().set_title('moj ramec')

"""DFT """

def DFT(x):

    N = 1024
    n = np.arange(N)
    k = n.reshape((N, 1))
    #matica
    mat = np.exp(-2j*np.pi*k*n/N)
    
    #vek nasobenie
    vek = np.dot(mat, x)

    return vek

vek = DFT(pole[12])

# pocitanie frekvencie 
N = len(vek)
n = np.arange(N)
T = N/fs
freq = n/T

vek = vek[0:len(vek)//2]
tmp = n/(framework/fs)
tmp = tmp[0:len(tmp)//2]

plt.figure(figsize=(20,6))
plt.plot(tmp, abs(vek))
plt.gca().set_xlabel('$Hz$')
plt.gca().set_title('Zvukový signál')
#manualne hladanie peaku rusiveho signalu 
#plt.ylim(3.8,4)
#plt.xlim(2560,2570)
#plt.show()

IPython.display.display(IPython.display.Audio(pole[12], rate=fs))

"""spektogram

"""

f, t, sgr = spectrogram(s, fs)
# prevod na PSD
# (ve spektrogramu se obcas objevuji nuly, ktere se nelibi logaritmu, proto +1e-20)
sgr_log = 10 * np.log10(sgr+1e-20)

plt.figure(figsize=(9,3))
plt.pcolormesh(t,f,sgr_log)
plt.gca().set_xlabel('Čas [s]')
plt.gca().set_ylabel('Frekvence [Hz]')
cbar = plt.colorbar()
cbar.set_label('Spektralní hustota výkonu [dB]', rotation=270, labelpad=15)

plt.tight_layout()

"""rusive frekvencie som si priblizil graf pri DFT"""

rusiva1 = np.cos(2*np.pi*640.60*np.arange(s.size)/fs)
rusiva2 = np.cos(2*np.pi*1281.2*np.arange(s.size)/fs)
rusiva3 = np.cos(2*np.pi*1921.8*np.arange(s.size)/fs)
rusiva4 = np.cos(2*np.pi*2562.4*np.arange(s.size)/fs)
celkovarusiva=rusiva1+rusiva2+rusiva3+rusiva4

f1, t1, sgr1 = spectrogram(celkovarusiva, fs)
# prevod na PSD
# (ve spektrogramu se obcas objevuji nuly, ktere se nelibi logaritmu, proto +1e-20)
sgr_log1 = 10 * np.log10(sgr1+1e-20)

plt.figure(figsize=(9,3))
plt.pcolormesh(t1,f1,sgr_log1)
plt.gca().set_xlabel('Čas [s]')
plt.gca().set_ylabel('Frekvence [Hz]')
cbar = plt.colorbar()
cbar.set_label('Spektralní hustota výkonu [dB]', rotation=270, labelpad=15)

plt.tight_layout()

IPython.display.display(IPython.display.Audio(celkovarusiva, rate=fs))

write("audio/4cos.wav", fs, celkovarusiva)

"""4.7"""

rusiva11=640.60
omega1 = 2*np.pi*rusiva11/fs
n1 = np.e**(1j*omega1)
min1 = np.conj(n1)
rusiva21=1281.2
omega2 = 2*np.pi*rusiva21/fs
n2 = np.e**(1j*omega2)
min2 = np.conj(n2)
rusiva31=1921.8
omega3 = 2*np.pi*rusiva31/fs
n3 = np.e**(1j*omega3)
min3 = np.conj(n3)
rusiva41=2562.4
omega4 = 2*np.pi*rusiva41/fs
n4 = np.e**(1j*omega4)
min4 = np.conj(n4)

k_filtru = np.poly((n1, min1, n2, min2, n3, min3, n4, min4))
print(k_filtru)

"""4.8"""

# takto nedostaneme stejný výsledek jako v Matlabu
a = [1,0,0,0,0,0,0,0,0]
b = k_filtru
z, p, _ = tf2zpk(b, a)
print(f'Nuly: {z}')
print(f'Póly: {p}')

plt.figure(figsize=(4,3.5))

# jednotkova kruznice
ang = np.linspace(0, 2*np.pi,100)
plt.plot(np.cos(ang), np.sin(ang))

# nuly, poly
plt.scatter(np.real(z), np.imag(z), marker='o', facecolors='none', edgecolors='r', label='nuly')
plt.scatter(np.real(p), np.imag(p), marker='x', color='g', label='póly')

is_stable = (p.size == 0) or np.all(np.abs(p) < 1) 

plt.gca().set_xlabel('Realná složka $\mathbb{R}\{$z$\}$')
plt.gca().set_ylabel('Imaginární složka $\mathbb{I}\{$z$\}$')

plt.grid(alpha=0.5, linestyle='--')
plt.legend(loc='upper left')

plt.tight_layout()

print('Filtr {} stabilní.'.format('je' if is_stable else 'není'))

"""4.9"""

w, H = freqz(b, a)
_, ax = plt.subplots(1, 2, figsize=(8,3))

ax[0].plot(w / 2 / np.pi * fs, np.abs(H))
ax[0].set_xlabel('Frekvence [Hz]')
ax[0].set_title('Modul frekvenční charakteristiky $|H(e^{j\omega})|$')

ax[1].plot(w / 2 / np.pi * fs, np.angle(H))
ax[1].set_xlabel('Frekvence [Hz]')
ax[1].set_title('Argument frekvenční charakteristiky $\mathrm{arg}\ H(e^{j\omega})$')

for ax1 in ax:
    ax1.grid(alpha=0.5, linestyle='--')

plt.tight_layout()

"""4.10"""

# stabilita
is_stable = (p.size == 0) or np.all(np.abs(p) < 1) 

# filtrace
sf = lfilter(b, a, s)
f, t, sfgr = spectrogram(sf, fs)
sfgr_log = 10 * np.log10(sfgr+1e-20)

IPython.display.display(IPython.display.Audio(sf, rate=fs))

write("audio/clean_z.wav", fs, sf)

s.size/sf

print('Filtr {} stabilní.'.format('je' if is_stable else 'není'))

f, t, sgr = spectrogram(sf, fs)
# prevod na PSD
# (ve spektrogramu se obcas objevuji nuly, ktere se nelibi logaritmu, proto +1e-20)
sgr_log = 10 * np.log10(sgr+1e-20)

plt.figure(figsize=(9,3))
plt.pcolormesh(t,f,sgr_log)
plt.gca().set_xlabel('Čas [s]')
plt.gca().set_ylabel('Frekvence [Hz]')
cbar = plt.colorbar()
cbar.set_label('Spektralní hustota výkonu [dB]', rotation=270, labelpad=15)

plt.tight_layout()